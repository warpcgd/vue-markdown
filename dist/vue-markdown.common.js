/*!
 * /**
 *  * vue-markdown v2.2.4
 *  * https://github.com/miaolz123/vue-markdown
 *  * MIT License
 *  * /
 * 
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("@babel/runtime/helpers/interopRequireDefault"),require("markdown-it"),require("markdown-it-emoji"),require("markdown-it-sub"),require("markdown-it-sup"),require("markdown-it-footnote"),require("markdown-it-deflist"),require("markdown-it-abbr"),require("markdown-it-ins"),require("markdown-it-mark"),require("markdown-it-toc-and-anchor"),require("markdown-it-katex"),require("markdown-it-task-lists")):"function"==typeof define&&define.amd?define(["@babel/runtime/helpers/interopRequireDefault","markdown-it","markdown-it-emoji","markdown-it-sub","markdown-it-sup","markdown-it-footnote","markdown-it-deflist","markdown-it-abbr","markdown-it-ins","markdown-it-mark","markdown-it-toc-and-anchor","markdown-it-katex","markdown-it-task-lists"],t):"object"==typeof exports?exports.VueMarkdown=t(require("@babel/runtime/helpers/interopRequireDefault"),require("markdown-it"),require("markdown-it-emoji"),require("markdown-it-sub"),require("markdown-it-sup"),require("markdown-it-footnote"),require("markdown-it-deflist"),require("markdown-it-abbr"),require("markdown-it-ins"),require("markdown-it-mark"),require("markdown-it-toc-and-anchor"),require("markdown-it-katex"),require("markdown-it-task-lists")):e.VueMarkdown=t(e["@babel/runtime/helpers/interopRequireDefault"],e["markdown-it"],e["markdown-it-emoji"],e["markdown-it-sub"],e["markdown-it-sup"],e["markdown-it-footnote"],e["markdown-it-deflist"],e["markdown-it-abbr"],e["markdown-it-ins"],e["markdown-it-mark"],e["markdown-it-toc-and-anchor"],e["markdown-it-katex"],e["markdown-it-task-lists"])}(global,function(e,t,r,n,o,i,a,d,c,u,s,l,f){return function(e){function t(e){var t=require("./"+e+"."+o+".hot-update.js");!function(e,t){if(!w[e]||!v[e])return;for(var r in v[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(h[r]=t[r]);0==--y&&0===k&&j()}(t.id,t.modules)}var r,n=!0,o="669a0e66a7c555038ece",i={},a=[],d=[];function c(e){var t=_[e];if(!t)return D;var n=function(n){return t.hot.active?(_[n]?-1===_[n].parents.indexOf(e)&&_[n].parents.push(e):(a=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),a=[]),D(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var i in D)Object.prototype.hasOwnProperty.call(D,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(n,i,o(i));return n.e=function(e){return"ready"===l&&f("prepare"),k++,D.e(e).then(t,function(e){throw t(),e});function t(){k--,"prepare"===l&&(b[e]||O(e),0===k&&0===y&&j())}},n.t=function(e,t){return 1&t&&(e=n(e)),D.t(e,-2&t)},n}function u(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:x,apply:q,status:function(e){if(!e)return l;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:i[e]};return r=void 0,t}var s=[],l="idle";function f(e){l=e;for(var t=0;t<s.length;t++)s[t].call(null,e)}var p,h,m,y=0,k=0,b={},v={},w={};function g(e){return+e+""===e?+e:e}function x(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return n=e,f("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return f("idle"),null;v={},b={},w=e.c,m=e.h,f("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return O(0),"prepare"===l&&0===k&&0===y&&j(),t})}function O(e){w[e]?(v[e]=!0,y++,t(e)):b[e]=!0}function j(){f("ready");var e=p;if(p=null,e)if(n)Promise.resolve().then(function(){return q(n)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&t.push(g(r));e.resolve(t)}}function q(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var r,n,d,c,u;function s(e){for(var t=[e],r={},n=t.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),i=o.id,a=o.chain;if((c=_[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var d=0;d<c.parents.length;d++){var u=c.parents[d],s=_[u];if(s){if(s.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(s.hot._acceptedDependencies[i]?(r[u]||(r[u]=[]),p(r[u],[i])):(delete r[u],t.push(u),n.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}t=t||{};var y={},k=[],b={},v=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var x in h)if(Object.prototype.hasOwnProperty.call(h,x)){var O;u=g(x);var j=!1,q=!1,L=!1,P="";switch((O=h[x]?s(u):{type:"disposed",moduleId:x}).chain&&(P="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(j=new Error("Aborted because of self decline: "+O.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(O),t.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(O),t.ignoreUnaccepted||(j=new Error("Aborted because "+u+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(O),q=!0;break;case"disposed":t.onDisposed&&t.onDisposed(O),L=!0;break;default:throw new Error("Unexception type "+O.type)}if(j)return f("abort"),Promise.reject(j);if(q)for(u in b[u]=h[u],p(k,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,u)&&(y[u]||(y[u]=[]),p(y[u],O.outdatedDependencies[u]));L&&(p(k,[O.moduleId]),b[u]=v)}var A,S=[];for(n=0;n<k.length;n++)u=k[n],_[u]&&_[u].hot._selfAccepted&&S.push({module:u,errorHandler:_[u].hot._selfAccepted});f("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var I,E,H=k.slice();H.length>0;)if(u=H.pop(),c=_[u]){var C={},B=c.hot._disposeHandlers;for(d=0;d<B.length;d++)(r=B[d])(C);for(i[u]=C,c.hot.active=!1,delete _[u],delete y[u],d=0;d<c.children.length;d++){var M=_[c.children[d]];M&&((A=M.parents.indexOf(u))>=0&&M.parents.splice(A,1))}}for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(c=_[u]))for(E=y[u],d=0;d<E.length;d++)I=E[d],(A=c.children.indexOf(I))>=0&&c.children.splice(A,1);for(u in f("apply"),o=m,b)Object.prototype.hasOwnProperty.call(b,u)&&(e[u]=b[u]);var $=null;for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(c=_[u])){E=y[u];var F=[];for(n=0;n<E.length;n++)if(I=E[n],r=c.hot._acceptedDependencies[I]){if(-1!==F.indexOf(r))continue;F.push(r)}for(n=0;n<F.length;n++){r=F[n];try{r(E)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:E[n],error:e}),t.ignoreErrored||$||($=e)}}}for(n=0;n<S.length;n++){var U=S[n];u=U.module,a=[u];try{D(u)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:r,originalError:e}),t.ignoreErrored||$||($=r),$||($=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||$||($=e)}}return $?(f("fail"),Promise.reject($)):(f("idle"),new Promise(function(e){e(k)}))}var _={};function D(t){if(_[t])return _[t].exports;var r=_[t]={i:t,l:!1,exports:{},hot:u(t),parents:(d=a,a=[],d),children:[]};return e[t].call(r.exports,r,r.exports,c(t)),r.l=!0,r.exports}return D.m=e,D.c=_,D.d=function(e,t,r){D.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,t){if(1&t&&(e=D(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(D.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)D.d(r,n,function(t){return e[t]}.bind(null,n));return r},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="",D.h=function(){return o},c(0)(D.s=0)}([function(e,t,r){"use strict";var n=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(2)),i=n(r(3)),a=n(r(4)),d=n(r(5)),c=n(r(6)),u=n(r(7)),s=n(r(8)),l=n(r(9)),f=n(r(10)),p=n(r(11)),h=n(r(12)),m=n(r(13)),y={md:new o.default,template:"<div><slot></slot></div>",data:function(){return{sourceData:this.source}},props:{watches:{type:Array,default:function(){return["source","show","toc"]}},source:{type:String,default:""},show:{type:Boolean,default:!0},highlight:{type:Boolean,default:!0},html:{type:Boolean,default:!0},xhtmlOut:{type:Boolean,default:!0},breaks:{type:Boolean,default:!0},linkify:{type:Boolean,default:!0},emoji:{type:Boolean,default:!0},typographer:{type:Boolean,default:!0},langPrefix:{type:String,default:"language-"},quotes:{type:String,default:"“”‘’"},tableClass:{type:String,default:"table"},taskLists:{type:Boolean,default:!0},toc:{type:Boolean,default:!1},tocId:{type:String},tocClass:{type:String,default:"table-of-contents"},tocFirstLevel:{type:Number,default:2},tocLastLevel:{type:Number},tocAnchorLink:{type:Boolean,default:!0},tocAnchorClass:{type:String,default:"toc-anchor"},tocAnchorLinkSymbol:{type:String,default:"#"},tocAnchorLinkSpace:{type:Boolean,default:!0},tocAnchorLinkClass:{type:String,default:"toc-anchor-link"},anchorAttributes:{type:Object,default:function(){return{}}},prerender:{type:Function,default:function(e){return e}},postrender:{type:Function,default:function(e){return e}}},computed:{tocLastLevelComputed:function(){return this.tocLastLevel>this.tocFirstLevel?this.tocLastLevel:this.tocFirstLevel+1}},render:function(e){var t=this;this.md=(new o.default).use(a.default).use(d.default).use(c.default).use(u.default).use(s.default).use(l.default).use(f.default).use(h.default,{throwOnError:!1,errorColor:" #cc0000"}).use(m.default,{enabled:this.taskLists}),this.emoji&&this.md.use(i.default),this.md.set({html:this.html,xhtmlOut:this.xhtmlOut,breaks:this.breaks,linkify:this.linkify,typographer:this.typographer,langPrefix:this.langPrefix,quotes:this.quotes}),this.md.renderer.rules.table_open=function(){return'<table class="'.concat(t.tableClass,'">\n')};var r=this.md.renderer.rules.link_open||function(e,t,r,n,o){return o.renderToken(e,t,r)};this.md.renderer.rules.link_open=function(e,n,o,i,a){return Object.keys(t.anchorAttributes).map(function(r){var o=e[n].attrIndex(r),i=t.anchorAttributes[r];o<0?e[n].attrPush([r,i]):e[n].attrs[o][1]=i}),r(e,n,o,i,a)},this.toc&&this.md.use(p.default,{tocClassName:this.tocClass,tocFirstLevel:this.tocFirstLevel,tocLastLevel:this.tocLastLevelComputed,anchorLink:this.tocAnchorLink,anchorLinkSymbol:this.tocAnchorLinkSymbol,anchorLinkSpace:this.tocAnchorLinkSpace,anchorClassName:this.tocAnchorClass,anchorLinkSymbolClassName:this.tocAnchorLinkClass,tocCallback:function(e,r,n){n&&(t.tocId&&document.getElementById(t.tocId)&&(document.getElementById(t.tocId).innerHTML=n),t.$emit("toc-rendered",n))}});var n=this.show?this.md.render(this.prerender(this.sourceData)):"";return n=this.postrender(n),this.$emit("rendered",n),e("div",{domProps:{innerHTML:n}})},beforeMount:function(){var e=this;if(this.$slots.default){this.sourceData="";var t=!0,r=!1,n=void 0;try{for(var o,i=this.$slots.default[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;this.sourceData+=a.text}}catch(e){r=!0,n=e}finally{try{t||null==i.return||i.return()}finally{if(r)throw n}}}this.$watch("source",function(){e.sourceData=e.prerender(e.source),e.$forceUpdate()}),this.watches.forEach(function(t){e.$watch(t,function(){e.$forceUpdate()})})}};t.default=y},function(t,r){t.exports=e},function(e,r){e.exports=t},function(e,t){e.exports=r},function(e,t){e.exports=n},function(e,t){e.exports=o},function(e,t){e.exports=i},function(e,t){e.exports=a},function(e,t){e.exports=d},function(e,t){e.exports=c},function(e,t){e.exports=u},function(e,t){e.exports=s},function(e,t){e.exports=l},function(e,t){e.exports=f}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,